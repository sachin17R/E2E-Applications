#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital_Application.DataComponent
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="3338")]
	public partial class PatientDoctorDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblDoctor(tblDoctor instance);
    partial void UpdatetblDoctor(tblDoctor instance);
    partial void DeletetblDoctor(tblDoctor instance);
    partial void InserttblPatient(tblPatient instance);
    partial void UpdatetblPatient(tblPatient instance);
    partial void DeletetblPatient(tblPatient instance);
    #endregion
		
		public PatientDoctorDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["_3338ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDoctorDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDoctorDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDoctorDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDoctorDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblDoctor> tblDoctors
		{
			get
			{
				return this.GetTable<tblDoctor>();
			}
		}
		
		public System.Data.Linq.Table<tblPatient> tblPatients
		{
			get
			{
				return this.GetTable<tblPatient>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDoctors")]
	public partial class tblDoctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorId;
		
		private string _DoctorName;
		
		private string _Specialization;
		
		private EntitySet<tblPatient> _tblPatients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    partial void OnDoctorNameChanging(string value);
    partial void OnDoctorNameChanged();
    partial void OnSpecializationChanging(string value);
    partial void OnSpecializationChanged();
    #endregion
		
		public tblDoctor()
		{
			this._tblPatients = new EntitySet<tblPatient>(new Action<tblPatient>(this.attach_tblPatients), new Action<tblPatient>(this.detach_tblPatients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this.OnDoctorNameChanging(value);
					this.SendPropertyChanging();
					this._DoctorName = value;
					this.SendPropertyChanged("DoctorName");
					this.OnDoctorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialization", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Specialization
		{
			get
			{
				return this._Specialization;
			}
			set
			{
				if ((this._Specialization != value))
				{
					this.OnSpecializationChanging(value);
					this.SendPropertyChanging();
					this._Specialization = value;
					this.SendPropertyChanged("Specialization");
					this.OnSpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDoctor_tblPatient", Storage="_tblPatients", ThisKey="DoctorId", OtherKey="DoctorID")]
		public EntitySet<tblPatient> tblPatients
		{
			get
			{
				return this._tblPatients;
			}
			set
			{
				this._tblPatients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPatients(tblPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblDoctor = this;
		}
		
		private void detach_tblPatients(tblPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblDoctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPatient")]
	public partial class tblPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private string _PatientName;
		
		private string _PatientAddress;
		
		private int _BillAmount;
		
		private System.Nullable<int> _DoctorID;
		
		private EntityRef<tblPatient> _tblPatient2;
		
		private EntityRef<tblDoctor> _tblDoctor;
		
		private EntityRef<tblPatient> _tblPatient1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnPatientAddressChanging(string value);
    partial void OnPatientAddressChanged();
    partial void OnBillAmountChanging(int value);
    partial void OnBillAmountChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    #endregion
		
		public tblPatient()
		{
			this._tblPatient2 = default(EntityRef<tblPatient>);
			this._tblDoctor = default(EntityRef<tblDoctor>);
			this._tblPatient1 = default(EntityRef<tblPatient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._tblPatient1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAddress", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PatientAddress
		{
			get
			{
				return this._PatientAddress;
			}
			set
			{
				if ((this._PatientAddress != value))
				{
					this.OnPatientAddressChanging(value);
					this.SendPropertyChanging();
					this._PatientAddress = value;
					this.SendPropertyChanged("PatientAddress");
					this.OnPatientAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillAmount", DbType="Int NOT NULL")]
		public int BillAmount
		{
			get
			{
				return this._BillAmount;
			}
			set
			{
				if ((this._BillAmount != value))
				{
					this.OnBillAmountChanging(value);
					this.SendPropertyChanging();
					this._BillAmount = value;
					this.SendPropertyChanged("BillAmount");
					this.OnBillAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._tblDoctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblPatient", Storage="_tblPatient2", ThisKey="PatientId", OtherKey="PatientId", IsUnique=true, IsForeignKey=false)]
		public tblPatient tblPatient2
		{
			get
			{
				return this._tblPatient2.Entity;
			}
			set
			{
				tblPatient previousValue = this._tblPatient2.Entity;
				if (((previousValue != value) 
							|| (this._tblPatient2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPatient2.Entity = null;
						previousValue.tblPatient1 = null;
					}
					this._tblPatient2.Entity = value;
					if ((value != null))
					{
						value.tblPatient1 = this;
					}
					this.SendPropertyChanged("tblPatient2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDoctor_tblPatient", Storage="_tblDoctor", ThisKey="DoctorID", OtherKey="DoctorId", IsForeignKey=true)]
		public tblDoctor tblDoctor
		{
			get
			{
				return this._tblDoctor.Entity;
			}
			set
			{
				tblDoctor previousValue = this._tblDoctor.Entity;
				if (((previousValue != value) 
							|| (this._tblDoctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDoctor.Entity = null;
						previousValue.tblPatients.Remove(this);
					}
					this._tblDoctor.Entity = value;
					if ((value != null))
					{
						value.tblPatients.Add(this);
						this._DoctorID = value.DoctorId;
					}
					else
					{
						this._DoctorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblDoctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblPatient", Storage="_tblPatient1", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
		public tblPatient tblPatient1
		{
			get
			{
				return this._tblPatient1.Entity;
			}
			set
			{
				tblPatient previousValue = this._tblPatient1.Entity;
				if (((previousValue != value) 
							|| (this._tblPatient1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPatient1.Entity = null;
						previousValue.tblPatient2 = null;
					}
					this._tblPatient1.Entity = value;
					if ((value != null))
					{
						value.tblPatient2 = this;
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("tblPatient1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
